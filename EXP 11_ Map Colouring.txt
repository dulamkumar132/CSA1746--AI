def is_safe(node, color, graph, colors):
    for neighbor in graph[node]:
        if colors[neighbor] == color:
            return False
    return True

def map_coloring(graph, colors, node, num_colors):
    if node == len(graph):
        return True

    for color in range(1, num_colors + 1):
        if is_safe(node, color, graph, colors):
            colors[node] = color
            if map_coloring(graph, colors, node + 1, num_colors):
                return True
            colors[node] = 0
    return False

def solve_map_coloring(graph, num_colors):
    colors = [0] * len(graph)
    if not map_coloring(graph, colors, 0, num_colors):
        return None
    return colors

# Example usage
graph = {
    0: [1, 2, 3],
    1: [0, 2],
    2: [0, 1, 3],
    3: [0, 2]
}

num_colors = 3  # Minimum number of colors required
solution = solve_map_coloring(graph, num_colors)
if solution:
    print("Solution found:", solution)
else:
    print("No solution found.")
